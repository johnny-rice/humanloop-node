/* tslint:disable */
/* eslint-disable */
/*
Humanloop API

The Humanloop API allows you to interact with Humanloop from your product or service.

You can do this through HTTP requests from any language or via our official Python or TypeScript SDK.

To install the official [Python SDK](https://pypi.org/project/humanloop/), run the following command:

```bash
pip install humanloop
```

To install the official [TypeScript SDK](https://www.npmjs.com/package/humanloop), run the following command:

```bash
npm i humanloop
```

---

Guides and further details about key concepts can be found in [our docs](https://docs.humanloop.com/).

The version of the OpenAPI document: 4.0.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddEvaluatorsRequest } from '../models';
// @ts-ignore
import { CreateEvaluationLogRequest } from '../models';
// @ts-ignore
import { CreateEvaluationRequest } from '../models';
// @ts-ignore
import { CreateEvaluationResultLogRequest } from '../models';
// @ts-ignore
import { CreateLogResponse } from '../models';
// @ts-ignore
import { EvaluationResponse } from '../models';
// @ts-ignore
import { EvaluationResultProperty } from '../models';
// @ts-ignore
import { EvaluationResultResponse } from '../models';
// @ts-ignore
import { EvaluationStatus } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { LogRequest } from '../models';
// @ts-ignore
import { PaginatedDataEvaluationDatapointSnapshotResponse } from '../models';
// @ts-ignore
import { PaginatedDataEvaluationResponse } from '../models';
// @ts-ignore
import { ProviderApiKeys } from '../models';
// @ts-ignore
import { UpdateEvaluationStatusRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EvaluationsApi - axios parameter creator
 * @export
 */
export const EvaluationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add evaluators to an existing evaluation run.
         * @summary Add Evaluators
         * @param {string} id String ID of evaluation run. Starts with &#x60;ev_&#x60;.
         * @param {AddEvaluatorsRequest} addEvaluatorsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEvaluators: async (id: string, addEvaluatorsRequest: AddEvaluatorsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addEvaluators', 'id', id)
            // verify required parameter 'addEvaluatorsRequest' is not null or undefined
            assertParamExists('addEvaluators', 'addEvaluatorsRequest', addEvaluatorsRequest)
            const localVarPath = `/evaluations/{id}/evaluators`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-API-KEY", keyParamName: "xAPIKEY", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: addEvaluatorsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/evaluations/{id}/evaluators',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(addEvaluatorsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an evaluation.
         * @summary Create
         * @param {string} projectId String ID of project. Starts with &#x60;pr_&#x60;.
         * @param {CreateEvaluationRequest} createEvaluationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (projectId: string, createEvaluationRequest: CreateEvaluationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('create', 'projectId', projectId)
            // verify required parameter 'createEvaluationRequest' is not null or undefined
            assertParamExists('create', 'createEvaluationRequest', createEvaluationRequest)
            const localVarPath = `/projects/{project_id}/evaluations`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-API-KEY", keyParamName: "xAPIKEY", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createEvaluationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{project_id}/evaluations',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createEvaluationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get evaluation by ID.
         * @summary Get
         * @param {string} id String ID of evaluation run. Starts with &#x60;ev_&#x60;.
         * @param {boolean} [evaluatorAggregates] Whether to include evaluator aggregates in the response.
         * @param {string} [evaluateeId] String ID of evaluatee version to return. If not defined, the first evaluatee will be returned. Starts with &#x60;evv_&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (id: string, evaluatorAggregates?: boolean, evaluateeId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('get', 'id', id)
            const localVarPath = `/evaluations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-API-KEY", keyParamName: "xAPIKEY", configuration })
            if (evaluatorAggregates !== undefined) {
                localVarQueryParameter['evaluator_aggregates'] = evaluatorAggregates;
            }

            if (evaluateeId !== undefined) {
                localVarQueryParameter['evaluatee_id'] = evaluateeId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/evaluations/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the evaluations associated with a project.  Sorting and filtering are supported through query params for categorical columns and the `created_at` timestamp.  Sorting is supported for the `dataset`, `config`, `status` and `evaluator-{evaluator_id}` columns. Specify sorting with the `sort` query param, with values `{column}.{ordering}`. E.g. ?sort=dataset.asc&sort=status.desc will yield a multi-column sort. First by dataset then by status.  Filtering is supported for the `id`, `dataset`, `config` and `status` columns.  Specify filtering with the `id_filter`, `dataset_filter`, `config_filter` and `status_filter` query params.  E.g. ?dataset_filter=my_dataset&dataset_filter=my_other_dataset&status_filter=running will only show rows where the dataset is \"my_dataset\" or \"my_other_dataset\", and where the status is \"running\".  An additional date range filter is supported for the `created_at` column. Use the `start_date` and `end_date` query parameters to configure this.
         * @summary Get Evaluations
         * @param {string} projectId String ID of project. Starts with &#x60;pr_&#x60;.
         * @param {Array<string>} [id] A list of evaluation run ids to filter on. Starts with &#x60;ev_&#x60;.
         * @param {string | Date} [startDate] Only return evaluations created after this date.
         * @param {string | Date} [endDate] Only return evaluations created before this date.
         * @param {number} [size] 
         * @param {number} [page] 
         * @param {string} [evaluateeId] String ID of evaluatee version to return. If not defined, the first evaluatee will be returned. Starts with &#x60;evv_&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (projectId: string, id?: Array<string>, startDate?: string | Date, endDate?: string | Date, size?: number, page?: number, evaluateeId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('list', 'projectId', projectId)
            const localVarPath = `/evaluations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-API-KEY", keyParamName: "xAPIKEY", configuration })
            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substr(0,10) :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substr(0,10) :
                    endDate;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (evaluateeId !== undefined) {
                localVarQueryParameter['evaluatee_id'] = evaluateeId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/evaluations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all the evaluations associated with your project.  Deprecated: This is a legacy unpaginated endpoint. Use `/evaluations` instead, with appropriate sorting, filtering and pagination options.
         * @summary List For Project
         * @param {string} projectId String ID of project. Starts with &#x60;pr_&#x60;.
         * @param {string} [evaluateeId] String ID of evaluatee version to return. If not defined, the first evaluatee will be returned. Starts with &#x60;evv_&#x60;.
         * @param {boolean} [evaluatorAggregates] Whether to include evaluator aggregates in the response.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        listAllForProject: async (projectId: string, evaluateeId?: string, evaluatorAggregates?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('listAllForProject', 'projectId', projectId)
            const localVarPath = `/projects/{project_id}/evaluations`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-project_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-API-KEY", keyParamName: "xAPIKEY", configuration })
            if (evaluateeId !== undefined) {
                localVarQueryParameter['evaluatee_id'] = evaluateeId;
            }

            if (evaluatorAggregates !== undefined) {
                localVarQueryParameter['evaluator_aggregates'] = evaluatorAggregates;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{project_id}/evaluations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get testcases by evaluation ID.
         * @summary List Datapoints
         * @param {string} id String ID of evaluation. Starts with &#x60;ev_&#x60;.
         * @param {number} [page] Page to fetch. Starts from 1.
         * @param {number} [size] Number of evaluation results to retrieve.
         * @param {string} [evaluateeId] String ID of evaluatee version to return. If not defined, the first evaluatee will be returned. Starts with &#x60;evv_&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatapoints: async (id: string, page?: number, size?: number, evaluateeId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listDatapoints', 'id', id)
            const localVarPath = `/evaluations/{id}/datapoints`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-API-KEY", keyParamName: "xAPIKEY", configuration })
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (evaluateeId !== undefined) {
                localVarQueryParameter['evaluatee_id'] = evaluateeId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/evaluations/{id}/datapoints',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Log an external generation to an evaluation run for a datapoint.  The run must have status \'running\'.
         * @summary Log
         * @param {string} evaluationId ID of the evaluation run. Starts with &#x60;evrun_&#x60;.
         * @param {CreateEvaluationLogRequest} createEvaluationLogRequest 
         * @param {string} [evaluateeId] String ID of evaluatee version to return. If not defined, the first evaluatee will be returned. Starts with &#x60;evv_&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        log: async (evaluationId: string, createEvaluationLogRequest: CreateEvaluationLogRequest, evaluateeId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'evaluationId' is not null or undefined
            assertParamExists('log', 'evaluationId', evaluationId)
            // verify required parameter 'createEvaluationLogRequest' is not null or undefined
            assertParamExists('log', 'createEvaluationLogRequest', createEvaluationLogRequest)
            const localVarPath = `/evaluations/{evaluation_id}/log`
                .replace(`{${"evaluation_id"}}`, encodeURIComponent(String(evaluationId !== undefined ? evaluationId : `-evaluation_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-API-KEY", keyParamName: "xAPIKEY", configuration })
            if (evaluateeId !== undefined) {
                localVarQueryParameter['evaluatee_id'] = evaluateeId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createEvaluationLogRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/evaluations/{evaluation_id}/log',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createEvaluationLogRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Log an evaluation result to an evaluation run.  The run must have status \'running\'. One of `result` or `error` must be provided.
         * @summary Result
         * @param {string} evaluationId ID of the evaluation run. Starts with &#x60;evrun_&#x60;.
         * @param {CreateEvaluationResultLogRequest} createEvaluationResultLogRequest 
         * @param {string} [evaluateeId] String ID of evaluatee version to return. If not defined, the first evaluatee will be returned. Starts with &#x60;evv_&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        result: async (evaluationId: string, createEvaluationResultLogRequest: CreateEvaluationResultLogRequest, evaluateeId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'evaluationId' is not null or undefined
            assertParamExists('result', 'evaluationId', evaluationId)
            // verify required parameter 'createEvaluationResultLogRequest' is not null or undefined
            assertParamExists('result', 'createEvaluationResultLogRequest', createEvaluationResultLogRequest)
            const localVarPath = `/evaluations/{evaluation_id}/result`
                .replace(`{${"evaluation_id"}}`, encodeURIComponent(String(evaluationId !== undefined ? evaluationId : `-evaluation_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-API-KEY", keyParamName: "xAPIKEY", configuration })
            if (evaluateeId !== undefined) {
                localVarQueryParameter['evaluatee_id'] = evaluateeId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createEvaluationResultLogRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/evaluations/{evaluation_id}/result',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createEvaluationResultLogRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the status of an evaluation run.  Can only be used to update the status of an evaluation run that uses external or human evaluators. The evaluation must currently have status \'running\' if swithcing to completed, or it must have status \'completed\' if switching back to \'running\'.
         * @summary Update Status
         * @param {string} id String ID of evaluation run. Starts with &#x60;ev_&#x60;.
         * @param {UpdateEvaluationStatusRequest} updateEvaluationStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStatus: async (id: string, updateEvaluationStatusRequest: UpdateEvaluationStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateStatus', 'id', id)
            // verify required parameter 'updateEvaluationStatusRequest' is not null or undefined
            assertParamExists('updateStatus', 'updateEvaluationStatusRequest', updateEvaluationStatusRequest)
            const localVarPath = `/evaluations/{id}/status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyHeader required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-API-KEY", keyParamName: "xAPIKEY", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateEvaluationStatusRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/evaluations/{id}/status',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateEvaluationStatusRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EvaluationsApi - functional programming interface
 * @export
 */
export const EvaluationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EvaluationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add evaluators to an existing evaluation run.
         * @summary Add Evaluators
         * @param {EvaluationsApiAddEvaluatorsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addEvaluators(requestParameters: EvaluationsApiAddEvaluatorsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EvaluationResponse>> {
            const addEvaluatorsRequest: AddEvaluatorsRequest = {
                evaluator_ids: requestParameters.evaluator_ids,
                evaluator_version_ids: requestParameters.evaluator_version_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addEvaluators(requestParameters.id, addEvaluatorsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create an evaluation.
         * @summary Create
         * @param {EvaluationsApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(requestParameters: EvaluationsApiCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EvaluationResponse>> {
            const createEvaluationRequest: CreateEvaluationRequest = {
                config_id: requestParameters.config_id,
                evaluator_ids: requestParameters.evaluator_ids,
                dataset_id: requestParameters.dataset_id,
                provider_api_keys: requestParameters.provider_api_keys,
                hl_generated: requestParameters.hl_generated,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(requestParameters.projectId, createEvaluationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get evaluation by ID.
         * @summary Get
         * @param {EvaluationsApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(requestParameters: EvaluationsApiGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EvaluationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(requestParameters.id, requestParameters.evaluatorAggregates, requestParameters.evaluateeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the evaluations associated with a project.  Sorting and filtering are supported through query params for categorical columns and the `created_at` timestamp.  Sorting is supported for the `dataset`, `config`, `status` and `evaluator-{evaluator_id}` columns. Specify sorting with the `sort` query param, with values `{column}.{ordering}`. E.g. ?sort=dataset.asc&sort=status.desc will yield a multi-column sort. First by dataset then by status.  Filtering is supported for the `id`, `dataset`, `config` and `status` columns.  Specify filtering with the `id_filter`, `dataset_filter`, `config_filter` and `status_filter` query params.  E.g. ?dataset_filter=my_dataset&dataset_filter=my_other_dataset&status_filter=running will only show rows where the dataset is \"my_dataset\" or \"my_other_dataset\", and where the status is \"running\".  An additional date range filter is supported for the `created_at` column. Use the `start_date` and `end_date` query parameters to configure this.
         * @summary Get Evaluations
         * @param {EvaluationsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: EvaluationsApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedDataEvaluationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.projectId, requestParameters.id, requestParameters.startDate, requestParameters.endDate, requestParameters.size, requestParameters.page, requestParameters.evaluateeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all the evaluations associated with your project.  Deprecated: This is a legacy unpaginated endpoint. Use `/evaluations` instead, with appropriate sorting, filtering and pagination options.
         * @summary List For Project
         * @param {EvaluationsApiListAllForProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async listAllForProject(requestParameters: EvaluationsApiListAllForProjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EvaluationResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllForProject(requestParameters.projectId, requestParameters.evaluateeId, requestParameters.evaluatorAggregates, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get testcases by evaluation ID.
         * @summary List Datapoints
         * @param {EvaluationsApiListDatapointsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDatapoints(requestParameters: EvaluationsApiListDatapointsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedDataEvaluationDatapointSnapshotResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDatapoints(requestParameters.id, requestParameters.page, requestParameters.size, requestParameters.evaluateeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Log an external generation to an evaluation run for a datapoint.  The run must have status \'running\'.
         * @summary Log
         * @param {EvaluationsApiLogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async log(requestParameters: EvaluationsApiLogRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateLogResponse>> {
            const createEvaluationLogRequest: CreateEvaluationLogRequest = {
                datapoint_id: requestParameters.datapoint_id,
                log: requestParameters.log
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.log(requestParameters.evaluationId, createEvaluationLogRequest, requestParameters.evaluateeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Log an evaluation result to an evaluation run.  The run must have status \'running\'. One of `result` or `error` must be provided.
         * @summary Result
         * @param {EvaluationsApiResultRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async result(requestParameters: EvaluationsApiResultRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EvaluationResultResponse>> {
            const createEvaluationResultLogRequest: CreateEvaluationResultLogRequest = {
                log_id: requestParameters.log_id,
                evaluator_id: requestParameters.evaluator_id,
                result: requestParameters.result,
                error: requestParameters.error
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.result(requestParameters.evaluationId, createEvaluationResultLogRequest, requestParameters.evaluateeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the status of an evaluation run.  Can only be used to update the status of an evaluation run that uses external or human evaluators. The evaluation must currently have status \'running\' if swithcing to completed, or it must have status \'completed\' if switching back to \'running\'.
         * @summary Update Status
         * @param {EvaluationsApiUpdateStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStatus(requestParameters: EvaluationsApiUpdateStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EvaluationResponse>> {
            const updateEvaluationStatusRequest: UpdateEvaluationStatusRequest = {
                status: requestParameters.status
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStatus(requestParameters.id, updateEvaluationStatusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EvaluationsApi - factory interface
 * @export
 */
export const EvaluationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EvaluationsApiFp(configuration)
    return {
        /**
         * Add evaluators to an existing evaluation run.
         * @summary Add Evaluators
         * @param {EvaluationsApiAddEvaluatorsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEvaluators(requestParameters: EvaluationsApiAddEvaluatorsRequest, options?: AxiosRequestConfig): AxiosPromise<EvaluationResponse> {
            return localVarFp.addEvaluators(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an evaluation.
         * @summary Create
         * @param {EvaluationsApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: EvaluationsApiCreateRequest, options?: AxiosRequestConfig): AxiosPromise<EvaluationResponse> {
            return localVarFp.create(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get evaluation by ID.
         * @summary Get
         * @param {EvaluationsApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: EvaluationsApiGetRequest, options?: AxiosRequestConfig): AxiosPromise<EvaluationResponse> {
            return localVarFp.get(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the evaluations associated with a project.  Sorting and filtering are supported through query params for categorical columns and the `created_at` timestamp.  Sorting is supported for the `dataset`, `config`, `status` and `evaluator-{evaluator_id}` columns. Specify sorting with the `sort` query param, with values `{column}.{ordering}`. E.g. ?sort=dataset.asc&sort=status.desc will yield a multi-column sort. First by dataset then by status.  Filtering is supported for the `id`, `dataset`, `config` and `status` columns.  Specify filtering with the `id_filter`, `dataset_filter`, `config_filter` and `status_filter` query params.  E.g. ?dataset_filter=my_dataset&dataset_filter=my_other_dataset&status_filter=running will only show rows where the dataset is \"my_dataset\" or \"my_other_dataset\", and where the status is \"running\".  An additional date range filter is supported for the `created_at` column. Use the `start_date` and `end_date` query parameters to configure this.
         * @summary Get Evaluations
         * @param {EvaluationsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: EvaluationsApiListRequest, options?: AxiosRequestConfig): AxiosPromise<PaginatedDataEvaluationResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all the evaluations associated with your project.  Deprecated: This is a legacy unpaginated endpoint. Use `/evaluations` instead, with appropriate sorting, filtering and pagination options.
         * @summary List For Project
         * @param {EvaluationsApiListAllForProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        listAllForProject(requestParameters: EvaluationsApiListAllForProjectRequest, options?: AxiosRequestConfig): AxiosPromise<Array<EvaluationResponse>> {
            return localVarFp.listAllForProject(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get testcases by evaluation ID.
         * @summary List Datapoints
         * @param {EvaluationsApiListDatapointsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatapoints(requestParameters: EvaluationsApiListDatapointsRequest, options?: AxiosRequestConfig): AxiosPromise<PaginatedDataEvaluationDatapointSnapshotResponse> {
            return localVarFp.listDatapoints(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Log an external generation to an evaluation run for a datapoint.  The run must have status \'running\'.
         * @summary Log
         * @param {EvaluationsApiLogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        log(requestParameters: EvaluationsApiLogRequest, options?: AxiosRequestConfig): AxiosPromise<CreateLogResponse> {
            return localVarFp.log(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Log an evaluation result to an evaluation run.  The run must have status \'running\'. One of `result` or `error` must be provided.
         * @summary Result
         * @param {EvaluationsApiResultRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        result(requestParameters: EvaluationsApiResultRequest, options?: AxiosRequestConfig): AxiosPromise<EvaluationResultResponse> {
            return localVarFp.result(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the status of an evaluation run.  Can only be used to update the status of an evaluation run that uses external or human evaluators. The evaluation must currently have status \'running\' if swithcing to completed, or it must have status \'completed\' if switching back to \'running\'.
         * @summary Update Status
         * @param {EvaluationsApiUpdateStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStatus(requestParameters: EvaluationsApiUpdateStatusRequest, options?: AxiosRequestConfig): AxiosPromise<EvaluationResponse> {
            return localVarFp.updateStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addEvaluators operation in EvaluationsApi.
 * @export
 * @interface EvaluationsApiAddEvaluatorsRequest
 */
export type EvaluationsApiAddEvaluatorsRequest = {
    
    /**
    * String ID of evaluation run. Starts with `ev_`.
    * @type {string}
    * @memberof EvaluationsApiAddEvaluators
    */
    readonly id: string
    
} & AddEvaluatorsRequest

/**
 * Request parameters for create operation in EvaluationsApi.
 * @export
 * @interface EvaluationsApiCreateRequest
 */
export type EvaluationsApiCreateRequest = {
    
    /**
    * String ID of project. Starts with `pr_`.
    * @type {string}
    * @memberof EvaluationsApiCreate
    */
    readonly projectId: string
    
} & CreateEvaluationRequest

/**
 * Request parameters for get operation in EvaluationsApi.
 * @export
 * @interface EvaluationsApiGetRequest
 */
export type EvaluationsApiGetRequest = {
    
    /**
    * String ID of evaluation run. Starts with `ev_`.
    * @type {string}
    * @memberof EvaluationsApiGet
    */
    readonly id: string
    
    /**
    * Whether to include evaluator aggregates in the response.
    * @type {boolean}
    * @memberof EvaluationsApiGet
    */
    readonly evaluatorAggregates?: boolean
    
    /**
    * String ID of evaluatee version to return. If not defined, the first evaluatee will be returned. Starts with `evv_`.
    * @type {string}
    * @memberof EvaluationsApiGet
    */
    readonly evaluateeId?: string
    
}

/**
 * Request parameters for list operation in EvaluationsApi.
 * @export
 * @interface EvaluationsApiListRequest
 */
export type EvaluationsApiListRequest = {
    
    /**
    * String ID of project. Starts with `pr_`.
    * @type {string}
    * @memberof EvaluationsApiList
    */
    readonly projectId: string
    
    /**
    * A list of evaluation run ids to filter on. Starts with `ev_`.
    * @type {Array<string>}
    * @memberof EvaluationsApiList
    */
    readonly id?: Array<string>
    
    /**
    * Only return evaluations created after this date.
    * @type {string | Date}
    * @memberof EvaluationsApiList
    */
    readonly startDate?: string | Date
    
    /**
    * Only return evaluations created before this date.
    * @type {string | Date}
    * @memberof EvaluationsApiList
    */
    readonly endDate?: string | Date
    
    /**
    * 
    * @type {number}
    * @memberof EvaluationsApiList
    */
    readonly size?: number
    
    /**
    * 
    * @type {number}
    * @memberof EvaluationsApiList
    */
    readonly page?: number
    
    /**
    * String ID of evaluatee version to return. If not defined, the first evaluatee will be returned. Starts with `evv_`.
    * @type {string}
    * @memberof EvaluationsApiList
    */
    readonly evaluateeId?: string
    
}

/**
 * Request parameters for listAllForProject operation in EvaluationsApi.
 * @export
 * @interface EvaluationsApiListAllForProjectRequest
 */
export type EvaluationsApiListAllForProjectRequest = {
    
    /**
    * String ID of project. Starts with `pr_`.
    * @type {string}
    * @memberof EvaluationsApiListAllForProject
    */
    readonly projectId: string
    
    /**
    * String ID of evaluatee version to return. If not defined, the first evaluatee will be returned. Starts with `evv_`.
    * @type {string}
    * @memberof EvaluationsApiListAllForProject
    */
    readonly evaluateeId?: string
    
    /**
    * Whether to include evaluator aggregates in the response.
    * @type {boolean}
    * @memberof EvaluationsApiListAllForProject
    */
    readonly evaluatorAggregates?: boolean
    
}

/**
 * Request parameters for listDatapoints operation in EvaluationsApi.
 * @export
 * @interface EvaluationsApiListDatapointsRequest
 */
export type EvaluationsApiListDatapointsRequest = {
    
    /**
    * String ID of evaluation. Starts with `ev_`.
    * @type {string}
    * @memberof EvaluationsApiListDatapoints
    */
    readonly id: string
    
    /**
    * Page to fetch. Starts from 1.
    * @type {number}
    * @memberof EvaluationsApiListDatapoints
    */
    readonly page?: number
    
    /**
    * Number of evaluation results to retrieve.
    * @type {number}
    * @memberof EvaluationsApiListDatapoints
    */
    readonly size?: number
    
    /**
    * String ID of evaluatee version to return. If not defined, the first evaluatee will be returned. Starts with `evv_`.
    * @type {string}
    * @memberof EvaluationsApiListDatapoints
    */
    readonly evaluateeId?: string
    
}

/**
 * Request parameters for log operation in EvaluationsApi.
 * @export
 * @interface EvaluationsApiLogRequest
 */
export type EvaluationsApiLogRequest = {
    
    /**
    * ID of the evaluation run. Starts with `evrun_`.
    * @type {string}
    * @memberof EvaluationsApiLog
    */
    readonly evaluationId: string
    
    /**
    * String ID of evaluatee version to return. If not defined, the first evaluatee will be returned. Starts with `evv_`.
    * @type {string}
    * @memberof EvaluationsApiLog
    */
    readonly evaluateeId?: string
    
} & CreateEvaluationLogRequest

/**
 * Request parameters for result operation in EvaluationsApi.
 * @export
 * @interface EvaluationsApiResultRequest
 */
export type EvaluationsApiResultRequest = {
    
    /**
    * ID of the evaluation run. Starts with `evrun_`.
    * @type {string}
    * @memberof EvaluationsApiResult
    */
    readonly evaluationId: string
    
    /**
    * String ID of evaluatee version to return. If not defined, the first evaluatee will be returned. Starts with `evv_`.
    * @type {string}
    * @memberof EvaluationsApiResult
    */
    readonly evaluateeId?: string
    
} & CreateEvaluationResultLogRequest

/**
 * Request parameters for updateStatus operation in EvaluationsApi.
 * @export
 * @interface EvaluationsApiUpdateStatusRequest
 */
export type EvaluationsApiUpdateStatusRequest = {
    
    /**
    * String ID of evaluation run. Starts with `ev_`.
    * @type {string}
    * @memberof EvaluationsApiUpdateStatus
    */
    readonly id: string
    
} & UpdateEvaluationStatusRequest

/**
 * EvaluationsApiGenerated - object-oriented interface
 * @export
 * @class EvaluationsApiGenerated
 * @extends {BaseAPI}
 */
export class EvaluationsApiGenerated extends BaseAPI {
    /**
     * Add evaluators to an existing evaluation run.
     * @summary Add Evaluators
     * @param {EvaluationsApiAddEvaluatorsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationsApiGenerated
     */
    public addEvaluators(requestParameters: EvaluationsApiAddEvaluatorsRequest, options?: AxiosRequestConfig) {
        return EvaluationsApiFp(this.configuration).addEvaluators(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an evaluation.
     * @summary Create
     * @param {EvaluationsApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationsApiGenerated
     */
    public create(requestParameters: EvaluationsApiCreateRequest, options?: AxiosRequestConfig) {
        return EvaluationsApiFp(this.configuration).create(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get evaluation by ID.
     * @summary Get
     * @param {EvaluationsApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationsApiGenerated
     */
    public get(requestParameters: EvaluationsApiGetRequest, options?: AxiosRequestConfig) {
        return EvaluationsApiFp(this.configuration).get(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the evaluations associated with a project.  Sorting and filtering are supported through query params for categorical columns and the `created_at` timestamp.  Sorting is supported for the `dataset`, `config`, `status` and `evaluator-{evaluator_id}` columns. Specify sorting with the `sort` query param, with values `{column}.{ordering}`. E.g. ?sort=dataset.asc&sort=status.desc will yield a multi-column sort. First by dataset then by status.  Filtering is supported for the `id`, `dataset`, `config` and `status` columns.  Specify filtering with the `id_filter`, `dataset_filter`, `config_filter` and `status_filter` query params.  E.g. ?dataset_filter=my_dataset&dataset_filter=my_other_dataset&status_filter=running will only show rows where the dataset is \"my_dataset\" or \"my_other_dataset\", and where the status is \"running\".  An additional date range filter is supported for the `created_at` column. Use the `start_date` and `end_date` query parameters to configure this.
     * @summary Get Evaluations
     * @param {EvaluationsApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationsApiGenerated
     */
    public list(requestParameters: EvaluationsApiListRequest, options?: AxiosRequestConfig) {
        return paginate({
            initialParameters: requestParameters,
            request: (parameters: EvaluationsApiListRequest) => {
                return EvaluationsApiFp(this.configuration).list(parameters, options).then((request) => request(this.axios, this.basePath));
            },
        });
    }

    /**
     * Get all the evaluations associated with your project.  Deprecated: This is a legacy unpaginated endpoint. Use `/evaluations` instead, with appropriate sorting, filtering and pagination options.
     * @summary List For Project
     * @param {EvaluationsApiListAllForProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof EvaluationsApiGenerated
     */
    public listAllForProject(requestParameters: EvaluationsApiListAllForProjectRequest, options?: AxiosRequestConfig) {
        return EvaluationsApiFp(this.configuration).listAllForProject(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get testcases by evaluation ID.
     * @summary List Datapoints
     * @param {EvaluationsApiListDatapointsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationsApiGenerated
     */
    public listDatapoints(requestParameters: EvaluationsApiListDatapointsRequest, options?: AxiosRequestConfig) {
        return paginate({
            initialParameters: requestParameters,
            request: (parameters: EvaluationsApiListDatapointsRequest) => {
                return EvaluationsApiFp(this.configuration).listDatapoints(parameters, options).then((request) => request(this.axios, this.basePath));
            },
        });
    }

    /**
     * Log an external generation to an evaluation run for a datapoint.  The run must have status \'running\'.
     * @summary Log
     * @param {EvaluationsApiLogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationsApiGenerated
     */
    public log(requestParameters: EvaluationsApiLogRequest, options?: AxiosRequestConfig) {
        return EvaluationsApiFp(this.configuration).log(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Log an evaluation result to an evaluation run.  The run must have status \'running\'. One of `result` or `error` must be provided.
     * @summary Result
     * @param {EvaluationsApiResultRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationsApiGenerated
     */
    public result(requestParameters: EvaluationsApiResultRequest, options?: AxiosRequestConfig) {
        return EvaluationsApiFp(this.configuration).result(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the status of an evaluation run.  Can only be used to update the status of an evaluation run that uses external or human evaluators. The evaluation must currently have status \'running\' if swithcing to completed, or it must have status \'completed\' if switching back to \'running\'.
     * @summary Update Status
     * @param {EvaluationsApiUpdateStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EvaluationsApiGenerated
     */
    public updateStatus(requestParameters: EvaluationsApiUpdateStatusRequest, options?: AxiosRequestConfig) {
        return EvaluationsApiFp(this.configuration).updateStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
